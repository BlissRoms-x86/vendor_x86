From 3150197225251b2f3b77112991118fbccee57f95 Mon Sep 17 00:00:00 2001
From: Kumar K M <kumar.k.m@intel.com>
Date: Fri, 15 Mar 2019 16:11:06 +0530
Subject: [PATCH 3/3] Handle HDMI audio in accessory manager

Change-Id: I2d2a81138a5f283822518d7ba62fee4c7c338b9a
Tracked-On: OAM-76220
Signed-off-by: Kumar K M <kumar.k.m@intel.com>
---
 .../android/server/WiredAccessoryManager.java | 69 +++++++++++++------
 1 file changed, 48 insertions(+), 21 deletions(-)

diff --git a/services/core/java/com/android/server/WiredAccessoryManager.java b/services/core/java/com/android/server/WiredAccessoryManager.java
index 3980bc6b57d9..eca38f514830 100644
--- a/services/core/java/com/android/server/WiredAccessoryManager.java
+++ b/services/core/java/com/android/server/WiredAccessoryManager.java
@@ -105,12 +105,15 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
         if (mUseDevInputEventForAudioJack) {
             int switchValues = 0;
             if (mInputManager.getSwitchState(-1, InputDevice.SOURCE_ANY, SW_HEADPHONE_INSERT) == 1) {
+		Log.v(TAG, " SW_HEADPHONE_INSERT ");
                 switchValues |= SW_HEADPHONE_INSERT_BIT;
             }
             if (mInputManager.getSwitchState(-1, InputDevice.SOURCE_ANY, SW_MICROPHONE_INSERT) == 1) {
-                switchValues |= SW_MICROPHONE_INSERT_BIT;
+                 Log.v(TAG, " SW_MICROPHONE_INSERT");
+		switchValues |= SW_MICROPHONE_INSERT_BIT;
             }
             if (mInputManager.getSwitchState(-1, InputDevice.SOURCE_ANY, SW_LINEOUT_INSERT) == 1) {
+		 Log.v(TAG,"SW_LINEOUT_INSERT #######");
                 switchValues |= SW_LINEOUT_INSERT_BIT;
             }
             if (mInputManager.getSwitchState(-1, InputDevice.SOURCE_ANY, SW_VIDEOOUT_INSERT) == 1) {
@@ -125,7 +128,7 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
 
     @Override
     public void notifyWiredAccessoryChanged(long whenNanos, int switchValues, int switchMask) {
-        if (LOG) Slog.i(TAG, "notifyWiredAccessoryChanged: when=" + whenNanos
+        Log.e(TAG, "notifyWiredAccessoryChanged: when=" + whenNanos
                 + " bits=" + switchCodeToString(switchValues, switchMask)
                 + " mask=" + Integer.toHexString(switchMask));
 
@@ -135,14 +138,17 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
             switch (mSwitchValues &
                 (SW_HEADPHONE_INSERT_BIT | SW_MICROPHONE_INSERT_BIT | SW_LINEOUT_INSERT_BIT | SW_VIDEOOUT_INSERT_BIT)) {
                 case 0:
+					Log.v(TAG," case-0");
                     headset = 0;
                     break;
 
                 case SW_HEADPHONE_INSERT_BIT:
+					Log.v(TAG," case:SW_HEADPHONE_INSERT_BIT");
                     headset = BIT_HEADSET_NO_MIC;
                     break;
 
                 case SW_LINEOUT_INSERT_BIT:
+                    Log.v(TAG," case:SW_LINEOUT_INSERT_BIT");
                     headset = BIT_LINEOUT;
                     break;
 
@@ -152,14 +158,22 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
                     break;
 
                 case SW_HEADPHONE_INSERT_BIT | SW_MICROPHONE_INSERT_BIT:
+					Log.v(TAG," case: SW_HEADPHONE_INSERT_BIT| SW_MICROPHONE_INSERT_BIT ");
                     headset = BIT_HEADSET;
                     break;
 
                 case SW_MICROPHONE_INSERT_BIT:
+					Log.v(TAG," case:SW_MICROPHONE_INSERT_BIT");
                     headset = BIT_HEADSET;
                     break;
+                    
+                case SW_HEADPHONE_INSERT_BIT | SW_LINEOUT_INSERT_BIT:
+					Log.v(TAG," case : SW_HEADPHONE_INSERT_BIT | SW_LINEOUT_INSERT_BIT");
+					headset = BIT_HEADSET;
+					break;
 
                 default:
+					Log.v(TAG," case :default");
                     headset = 0;
                     break;
             }
@@ -196,7 +210,7 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
         int h2w_headset = headsetState & (BIT_HEADSET | BIT_HEADSET_NO_MIC | BIT_LINEOUT);
         boolean h2wStateChange = true;
         boolean usbStateChange = true;
-        if (LOG) Slog.v(TAG, "newName=" + newName
+        Log.e(TAG, " newName=" + newName
                 + " newState=" + newState
                 + " headsetState=" + headsetState
                 + " prev headsetState=" + mHeadsetState);
@@ -210,23 +224,23 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
         // - a: 0 headset to 1 headset
         // - b: 1 headset to 0 headset
         if (h2w_headset == (BIT_HEADSET | BIT_HEADSET_NO_MIC | BIT_LINEOUT)) {
-            Log.e(TAG, "Invalid combination, unsetting h2w flag");
+            Log.e(TAG, " Invalid combination, unsetting h2w flag");
             h2wStateChange = false;
         }
         // - c: 0 usb headset to 1 usb headset
         // - d: 1 usb headset to 0 usb headset
         if (usb_headset_anlg == BIT_USB_HEADSET_ANLG && usb_headset_dgtl == BIT_USB_HEADSET_DGTL) {
-            Log.e(TAG, "Invalid combination, unsetting usb flag");
+            Log.e(TAG, " Invalid combination, unsetting usb flag");
             usbStateChange = false;
         }
         if (!h2wStateChange && !usbStateChange) {
-            Log.e(TAG, "invalid transition, returning ...");
+            Log.e(TAG, " invalid transition, returning ...");
             return;
         }
 
         mWakeLock.acquire();
 
-        Log.i(TAG, "MSG_NEW_DEVICE_STATE");
+        Log.i(TAG, " MSG_NEW_DEVICE_STATE");
         Message msg = mHandler.obtainMessage(MSG_NEW_DEVICE_STATE, headsetState,
                 mHeadsetState, "");
         mHandler.sendMessage(msg);
@@ -270,6 +284,8 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
             int inDevice = 0;
             int state;
 
+            Log.v(TAG," headset = " + headset);
+
             if ((headsetState & headset) != 0) {
                 state = 1;
             } else {
@@ -277,25 +293,29 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
             }
 
             if (headset == BIT_HEADSET) {
+				Log.v(TAG," inside AudioManager.DEVICE_OUT_WIRED_HEADSET");
                 outDevice = AudioManager.DEVICE_OUT_WIRED_HEADSET;
                 inDevice = AudioManager.DEVICE_IN_WIRED_HEADSET;
             } else if (headset == BIT_HEADSET_NO_MIC){
                 outDevice = AudioManager.DEVICE_OUT_WIRED_HEADPHONE;
             } else if (headset == BIT_LINEOUT){
                 outDevice = AudioManager.DEVICE_OUT_LINE;
+                Log.v(TAG," inside BIT_LINEOUT");
++//				outDevice = AudioManager.DEVICE_OUT_HDMI;
             } else if (headset == BIT_USB_HEADSET_ANLG) {
                 outDevice = AudioManager.DEVICE_OUT_ANLG_DOCK_HEADSET;
             } else if (headset == BIT_USB_HEADSET_DGTL) {
                 outDevice = AudioManager.DEVICE_OUT_DGTL_DOCK_HEADSET;
             } else if (headset == BIT_HDMI_AUDIO) {
+				Log.v(TAG," inside BIT_HDMI_AUDIO ");
                 outDevice = AudioManager.DEVICE_OUT_HDMI;
             } else {
-                Slog.e(TAG, "setDeviceState() invalid headset type: "+headset);
+                Log.e(TAG, "setDeviceState() invalid headset type: "+headset);
                 return;
             }
 
             if (LOG) {
-                Slog.i(TAG, "headsetName: " + headsetName +
+                Log.e(TAG, "headsetName: " + headsetName +
                         (state == 1 ? " connected" : " disconnected"));
             }
 
@@ -338,7 +358,7 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
 
         void init() {
             synchronized (mLock) {
-                if (LOG) Slog.v(TAG, "init()");
+                Log.e(TAG, "init()");
                 char[] buffer = new char[1024];
 
                 for (int i = 0; i < mUEventInfo.size(); ++i) {
@@ -354,10 +374,10 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
                             updateStateLocked(uei.getDevPath(), uei.getDevName(), curState);
                         }
                     } catch (FileNotFoundException e) {
-                        Slog.w(TAG, uei.getSwitchStatePath() +
+                        Log.e(TAG, uei.getSwitchStatePath() +
                                 " not found while attempting to determine initial switch state");
                     } catch (Exception e) {
-                        Slog.e(TAG, "" , e);
+                        Log.e(TAG, "" , e);
                     }
                 }
             }
@@ -377,20 +397,22 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
 
             // Monitor h2w
             if (!mUseDevInputEventForAudioJack) {
-                uei = new UEventInfo(NAME_H2W, BIT_HEADSET, BIT_HEADSET_NO_MIC, BIT_LINEOUT);
+                uei = new UEventInfo(NAME_H2W, BIT_HEADSET, BIT_HEADSET_NO_MIC,0);
                 if (uei.checkSwitchExists()) {
+			Log.v(TAG, "## inside H2W, Headset, : ");
                     retVal.add(uei);
                 } else {
-                    Slog.w(TAG, "This kernel does not have wired headset support");
+                    Log.v(TAG, "This kernel does not have wired headset support");
                 }
             }
 
             // Monitor USB
             uei = new UEventInfo(NAME_USB_AUDIO, BIT_USB_HEADSET_ANLG, BIT_USB_HEADSET_DGTL, 0);
             if (uei.checkSwitchExists()) {
+		Log.v(TAG, "## inside USB switch: USB");
                 retVal.add(uei);
             } else {
-                Slog.w(TAG, "This kernel does not have usb audio support");
+                Log.v(TAG, "This kernel does not have usb audio support");
             }
 
             // Monitor HDMI
@@ -401,15 +423,18 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
             //
             // If the kernel does not have an "hdmi_audio" switch, just fall back on the older
             // "hdmi" switch instead.
-            uei = new UEventInfo(NAME_HDMI_AUDIO, BIT_HDMI_AUDIO, 0, 0);
+            //uei = new UEventInfo(NAME_HDMI_AUDIO, BIT_HDMI_AUDIO, BIT_LINEOUT, 0);
+		uei = new UEventInfo(NAME_HDMI_AUDIO, BIT_HDMI_AUDIO, BIT_LINEOUT, 0);
             if (uei.checkSwitchExists()) {
+		Log.v(TAG, "inside switch-1: NAME_HDMI_AUDIO");
                 retVal.add(uei);
             } else {
-                uei = new UEventInfo(NAME_HDMI, BIT_HDMI_AUDIO, 0, 0);
+                uei = new UEventInfo(NAME_HDMI, BIT_HDMI_AUDIO, BIT_LINEOUT, 0);
+		Log.e(TAG, " inside switch-2: NAME_HDMI");
                 if (uei.checkSwitchExists()) {
                     retVal.add(uei);
                 } else {
-                    Slog.w(TAG, "This kernel does not have HDMI audio support");
+                    Log.e(TAG, " This kernel does not have HDMI audio support");
                 }
             }
 
@@ -418,7 +443,7 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
 
         @Override
         public void onUEvent(UEventObserver.UEvent event) {
-            if (LOG) Slog.v(TAG, "Headset UEVENT: " + event.toString());
+             Log.v(TAG, "Headset UEVENT: " + event.toString());
 
             try {
                 String devPath = event.get("DEVPATH");
@@ -428,7 +453,7 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
                     updateStateLocked(devPath, name, state);
                 }
             } catch (NumberFormatException e) {
-                Slog.e(TAG, "Could not parse switch state from event " + event);
+                Log.e(TAG, "Could not parse switch state from event " + event);
             }
         }
 
@@ -455,7 +480,9 @@ final class WiredAccessoryManager implements WiredAccessoryCallbacks {
                 mStateNbits = stateNbits;
             }
 
-            public String getDevName() { return mDevName; }
+            public String getDevName() { 
+		Log.v(" mDevName = %s", mDevName);
+		return mDevName; }
 
             public String getDevPath() {
                 return String.format(Locale.US, "/devices/virtual/switch/%s", mDevName);
-- 
2.17.1

